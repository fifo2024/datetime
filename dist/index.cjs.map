{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * @file 日期类对象\n * @author zhaoyadong\n */\nimport { ITextOption } from './types';\n\n/**\n * 一分钟的毫秒值 60000 = 60 * 1000\n */\nconst MILLISECONDS_MIN: number = 60000;\n/**\n * 一小时的毫秒值 3600000 = 60 * 60 * 1000\n */\nconst MILLISECONDS_HOUR: number = MILLISECONDS_MIN * 60;\n/**\n * 一天的毫秒值 86400000 = 24 * 60 * 60 * 1000\n */\nconst MILLISECONDS_DAY: number = MILLISECONDS_HOUR * 24;\n\nexport default class DateTime {\n    /**\n     * 内部私有的date对象\n     */\n    private _date: Date | null = null;\n\n    /**\n     * 构造函数\n     * @param year 年\n     * @param month 月\n     * @param day 日\n     * @param hours 小时\n     * @param minutes 分钟\n     * @param seconds 秒\n     * @param milliseconds 毫秒\n     */\n    constructor(\n        year?: number | string | Date,\n        month?: number,\n        day?: number,\n        hours?: number,\n        minutes?: number,\n        seconds?: number,\n        milliseconds?: number,\n    ) {\n        if (arguments.length === 0) {\n            this._date = new Date();\n        } else if (arguments.length === 1) {\n            // 保持new Date()参数的默认特征\n            this._date = new Date(year || '');\n        } else {\n            if (typeof year !== 'number') {\n                throw new Error('only support number type');\n            }\n            this._date = new Date(\n                year,\n                (month || 1) - 1,\n                day || 1,\n                hours || 0,\n                minutes || 0,\n                seconds || 0,\n                milliseconds || 0,\n            );\n        }\n        this.instanceOfDate = this._date;\n    }\n\n    /**\n     * 当前的Date类型内置对象\n     */\n    readonly instanceOfDate: Date | null = null;\n\n    /**\n     * 获取年份\n     */\n    getYears(): number {\n        return this._date?.getFullYear() || -1;\n    }\n\n    /**\n     * 获取月份\n     */\n    getMonths(): number {\n        return (this._date?.getMonth() || 0) + 1;\n    }\n\n    /**\n     * 获取天数\n     */\n    getDays(): number {\n        return this._date?.getDate() || -1;\n    }\n\n    /**\n     * 获取小时\n     */\n    getHours(): number {\n        return this._date?.getHours() || -1;\n    }\n\n    /**\n     * 获取分钟\n     */\n    getMinutes(): number {\n        return this._date?.getMinutes() || -1;\n    }\n\n    /**\n     * 获取秒数\n     */\n    getSeconds(): number {\n        return this._date?.getSeconds() || -1;\n    }\n\n    /**\n     * 获取毫秒秒数\n     */\n    getMilliseconds(): number {\n        return this._date?.getMilliseconds() || -1;\n    }\n\n    /**\n     * 可返回一周（0~6）的某一天的数字。注: 星期天为 0, 星期一为 1, 以此类推。\n     */\n    dayOfWeek(): number {\n        return this._date?.getDay() || -1;\n    }\n\n    /**\n     * 获取该实例所表示的日期是一年的第几天\n     */\n    dayOfYear(): number {\n        const currentYear: number = this.getYears();\n        // 今天减今年的第一天（xxxx年01月01日）\n        const hasTimestamp: number =\n            new Date(currentYear, this.getMonths() - 1, this.getDays()).getTime() -\n            new Date(currentYear, 0, 1).getTime();\n\n        const hasDays = Math.ceil(hasTimestamp / MILLISECONDS_DAY);\n        return hasDays + 1;\n    }\n\n    /**\n     * 获取该实例所表示的日期所在一年中的第几周\n     */\n    weekOfYear(): number {\n        const currentYear: number = this.getYears();\n        let firstDay = new Date(currentYear, 0, 1);\n        let dayOfWeek = firstDay.getDay();\n        let spendDay = 1;\n        if (dayOfWeek !== 0) {\n            spendDay = 7 - dayOfWeek + 1;\n        }\n        firstDay = new Date(currentYear, 0, 1 + spendDay);\n        let d = Math.ceil(((this._date?.getTime() || 0) - firstDay.getTime()) / MILLISECONDS_DAY);\n        let result = Math.ceil(d / 7);\n        return result + 1;\n    }\n\n    /**\n     * 获取当前月的天数\n     */\n    daysOfMonth(): number {\n        return DateTime.daysOfMonth(this.getYears(), this.getMonths());\n    }\n\n    /**\n     * 格式化日期\n     * @param format 格式化字符串，yyyy-代表年，MM-代表月，dd-代表日，hh-代表小时，mm-代表分钟，ss-代表秒数，SSS-代表3位毫秒数 -是可替换字符\n     */\n    toString(format?: string): string {\n        format = format || 'yyyy-MM-dd hh:mm:ss';\n        return DateTime.format(this, format);\n    }\n\n    /**\n     * 判断是否为闰年\n     * @param year 年份\n     */\n    isLeapYear(): boolean {\n        return DateTime.isLeapYear(this.getYears());\n    }\n\n    /**\n     * 增加年份，构建一个新的日期\n     * @param num 年份数量\n     */\n    addYears(num: number): DateTime {\n        let year: number = this.getYears();\n        year += num;\n        let month: number = this.getMonths();\n        let day: number = this.getDays();\n\n        if (month === 2 && day === 29 && !DateTime.isLeapYear(year)) {\n            // 如果是平年，则取28日，为最后一天\n            day = 28;\n        }\n        let hours: number = this.getHours();\n        let minutes: number = this.getMinutes();\n        let seconds: number = this.getSeconds();\n        let milliseconds: number = this.getMilliseconds();\n\n        return new DateTime(year, month, day, hours, minutes, seconds, milliseconds);\n    }\n\n    /**\n     * 增加月份，构建一个新的日期\n     * @param num 月份数量\n     */\n    addMonths(num: number): DateTime {\n        let year: number = this.getYears();\n        year = year > 0 ? year : 1;\n        let month: number = this.getMonths() + num;\n\n        let newDate: Date = new Date(year, month - 1, 1);\n        let newMonth: number = newDate.getMonth() + 1;\n        let newYear: number = newDate.getFullYear();\n\n        let day: number = this.getDays();\n        let newDay: number = DateTime.daysOfMonth(newYear, newMonth);\n        if (newDay < day) {\n            day = newDay;\n        }\n\n        let hours: number = this.getHours();\n        let minutes: number = this.getMinutes();\n        let seconds: number = this.getSeconds();\n        let milliseconds: number = this.getMilliseconds();\n\n        return new DateTime(newYear, newMonth, day, hours, minutes, seconds, milliseconds);\n    }\n\n    /**\n     * 增加天数，构造一个新的日期\n     * @param num 天数量\n     */\n    addDays(num: number): DateTime {\n        let addMillis: number = num * MILLISECONDS_DAY;\n        let time: number = this.getTime();\n        return new DateTime(time + addMillis);\n    }\n\n    /**\n     * 增加小时，构造一个新的日期\n     * @param num 小时数量\n     */\n    addHours(num: number): DateTime {\n        let addMillis: number = num * MILLISECONDS_HOUR;\n        let time: number = this.getTime();\n        return new DateTime(time + addMillis);\n    }\n\n    /**\n     * 增加分钟，构造一个新的日期\n     * @param num 分钟数量\n     */\n    addMinutes(num: number): DateTime {\n        let addMillis: number = num * 60 * 1000;\n        let time: number = this.getTime();\n        return new DateTime(time + addMillis);\n    }\n\n    /**\n     * 增加秒数，构造一个新的日期\n     * @param num 秒数数量\n     */\n    addSeconds(num: number): DateTime {\n        let addMillis: number = num * 1000;\n        let time: number = this.getTime();\n        return new DateTime(time + addMillis);\n    }\n\n    /**\n     * 增加毫秒数，构造一个新的日期\n     * @param num 毫秒数数量\n     */\n    addMilliseconds(num: number): DateTime {\n        let addMillis: number = num;\n        let time: number = this.getTime();\n        return new DateTime(time + addMillis);\n    }\n\n    /**\n     * 和另外一个日期比较，是否相同日期\n     * @param equalDate\n     * @return 返回true或false\n     */\n    equalTo(equalDate: DateTime): boolean {\n        return this._date?.getTime() === equalDate._date?.getTime();\n    }\n\n    /**\n     * 与一个日期对象差的天数，不足一天舍弃不计算，并且不区分正负，返回一个正整数\n     * @param compareDate 比较的日期\n     * @return 返回一个正整数，不关心谁大\n     */\n    diffDays(compareDate: DateTime): number {\n        let diff: number = Math.abs(\n            (this._date?.getTime() || 0) - (compareDate._date?.getTime() || 0),\n        );\n        let result = Math.floor(Math.abs(diff) / MILLISECONDS_DAY);\n        return result;\n    }\n\n    /**\n     * 获取时间戳，单位：毫秒\n     * @return 返回一个正整数，单位：毫秒\n     */\n    getTime(): number {\n        return this._date?.getTime() || -1;\n    }\n\n    /**\n     * 格式化显示距离当前日期已经过去多少时间\n     * @return 返回一个字符串\n     */\n    formatPassTime(): string {\n        return this._date ? DateTime.formatPassTime(this._date) : '';\n    }\n\n    /**\n     * 今天\n     */\n    static today(): DateTime {\n        let date = new Date();\n\n        let dt = new DateTime(date.getFullYear(), date.getMonth() + 1, date.getDate());\n        return dt;\n    }\n\n    /**\n     * 当前时间\n     */\n    static now(): DateTime {\n        return new DateTime();\n    }\n\n    /**\n     * 判断是否为闰年\n     * @param year 年份\n     */\n    static isLeapYear(year: number): boolean {\n        if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * 获取某年某月的天数\n     * @param year 年份\n     * @param month 月份\n     * @return 这个月份的天数\n     */\n    static daysOfMonth(year: number, month: number): number {\n        switch (month) {\n            case 1:\n            case 3:\n            case 5:\n            case 7:\n            case 8:\n            case 10:\n            case 12:\n                return 31;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                return 30;\n            case 2:\n                // 闰年判断\n                if (DateTime.isLeapYear(year)) {\n                    return 29;\n                } else {\n                    return 28;\n                }\n        }\n        // 默认31\n        return 31;\n    }\n\n    /**\n     * 格式化现在的已过时间\n     * @param startTime {Date} 开始时间\n     * @param options 配置选项，可空\n     *  例如：{yearText: '年前', monthText: '个月前', dayText: '天前',\n     *        hourText: '小时前', minText: '分钟前', secondText: '刚刚'}\n     * @return 格式化好的已过时间文本\n     */\n    static formatPassTime(startTime: DateTime | Date, options?: ITextOption): string {\n        let sTime: Date | null = null;\n        if (startTime instanceof DateTime) {\n            sTime = startTime.instanceOfDate;\n        } else if (startTime instanceof Date) {\n            sTime = startTime;\n        } else {\n            return '';\n        }\n        options = Object.assign(\n            {\n                yearText: '年前',\n                monthText: '个月前',\n                dayText: '天前',\n                hourText: '小时前',\n                minText: '分钟前',\n                secondText: '刚刚',\n            },\n            options,\n        );\n\n        let st: number = sTime?.getTime() || 0;\n        let currentTime: number = new Date().getTime(),\n            time: number = currentTime - st,\n            min: number = Math.floor(time / MILLISECONDS_MIN),\n            hour: number = Math.floor(time / MILLISECONDS_HOUR),\n            day: number = Math.floor(time / MILLISECONDS_DAY),\n            month: number = Math.floor(time / (30 * MILLISECONDS_DAY)),\n            year: number = Math.floor(time / (12 * 30 * MILLISECONDS_DAY));\n\n        if (year) return `${year}${options.yearText}`;\n        if (month) return `${month}${options.monthText}`;\n        if (day) return `${day}${options.dayText}`;\n        if (hour) return `${hour}${options.hourText}`;\n        if (min) return `${min}${options.minText}`;\n        return options.secondText || '';\n    }\n\n    /**\n     * 格式化日期数据\n     * @param date\n     * @param format\n     */\n    static format(date: DateTime | Date, format?: string): string {\n        format = format || 'yyyy-MM-dd hh:mm:ss';\n        const d: Date = date instanceof Date ? date : date.instanceOfDate || new Date();\n        const o: any = {\n            'M+': d.getMonth() + 1, // month\n            'd+': d.getDate(), // day\n            'h+': d.getHours(), // hour\n            'm+': d.getMinutes(), // minute\n            's+': d.getSeconds(), // second\n            'q+': Math.floor((d.getMonth() + 3) / 3), // quarter\n            'S+': d.getMilliseconds(), // millisecond\n        };\n\n        if (/(y+)/.test(format)) {\n            format = format.replace(RegExp.$1, (d.getFullYear() + '').substr(4 - RegExp.$1.length));\n        }\n\n        for (const k in o) {\n            if (new RegExp('(' + k + ')').test(format)) {\n                let formatStr = '';\n                for (let i = 1; i <= RegExp.$1.length; i++) {\n                    formatStr += '0';\n                }\n\n                let replaceStr = '';\n                if (RegExp.$1.length === 1) {\n                    replaceStr = o[k];\n                } else {\n                    formatStr = formatStr + o[k];\n                    const index = ('' + o[k]).length;\n                    formatStr = formatStr.substr(index);\n                    replaceStr = formatStr;\n                }\n                format = format.replace(RegExp.$1, replaceStr);\n            }\n        }\n        return format;\n    }\n}\n"],"mappings":"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","names":["src_exports","__export","DateTime","__toCommonJS","MILLISECONDS_MIN","MILLISECONDS_HOUR","MILLISECONDS_DAY","_DateTime","year","month","day","hours","minutes","seconds","milliseconds","_a","currentYear","hasTimestamp","firstDay","dayOfWeek","spendDay","d","format","num","newDate","newMonth","newYear","newDay","addMillis","time","equalDate","_b","compareDate","diff","date","startTime","options","sTime","st","currentTime","min","hour","o","k","formatStr","i","replaceStr","index"]}